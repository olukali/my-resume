name: build push and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write 
  contents: read 

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number}}
  TASK_DEFINITION: your-task-definition-name
  ECS_CLUSTER: your-ecs-cluster-name
  ECS_SERVICE: your-ecs-service-name


jobs:
  build:
    runs-on: ubuntu-latest  # guthub runner
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: Aws creds config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}     # OIDC
          aws-region: ${{ env.AWS_REGION}}
      - name: Loging to ecr 
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
      - name: Build tag and push image 
        id: build-and-push
        run: |
            docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
            docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}
    
      - name: scan docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"  # Scans the built image
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
      - name: Push image to ecr
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}
      - name: Set image output
        id: set-image
        run: echo "image=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_OUTPUT

      - name: Post Fix Suggestions on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            // Use require() to import Node.js modules
            const fs = require('fs');
            
            try {
              // Read file synchronously (use async methods if preferred)
              const fsReport = JSON.parse(fs.readFileSync('trivy-fs-results.json', 'utf8'));
              const imageReport = JSON.parse(fs.readFileSync('trivy-image-results.json', 'utf8'));
              
              const formatVulns = (vulns) => vulns.map(v => `
                **Package:** ${v.PkgName} (${v.InstalledVersion})  
                **CVE:** ${v.VulnerabilityID} (${v.Severity})  
                **Fix Version:** ${v.FixedVersion || 'None'}  
                **Advisory:** ${v.PrimaryURL || 'N/A'}
              `).join('\n');

              const fsVulns = fsReport.Results?.flatMap(r => r.Vulnerabilities || []);
              const imageVulns = imageReport.Results?.flatMap(r => r.Vulnerabilities || []);

              let comment = '## 🔍 Trivy Security Report\n';
              if (fsVulns.length > 0) comment += `### 📂 Filesystem Vulnerabilities\n${formatVulns(fsVulns)}\n`;
              if (imageVulns.length > 0) comment += `### 🐳 Docker Image Vulnerabilities\n${formatVulns(imageVulns)}\n`;
              if (fsVulns.length + imageVulns.length === 0) comment += '✅ No critical/high vulnerabilities found.';

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              core.error('Failed to process Trivy results: ' + error.message);
            }
  Deploy:
    runs-on: ubuntu-latest
    needs: build  # Depends on build job
    steps:
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Update task definition with new ECR image
        run: |
          jq --arg IMAGE_URI "${{ needs.build.outputs.image }}" '.containerDefinitions[0].image = $IMAGE_URI | 
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)' task-definition.json > register-task-definition.json
      
      - name: Register new task definition
        id: register-task-def
        run: |
          aws ecs register-task-definition --cli-input-json file://register-task-definition.json
          NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "NEW_TASK_DEFINITION=$NEW_TASK_DEFINITION" >> $GITHUB_ENV
      
      - name: Update ECS service
        env:
          NEW_TASK_DEFINITION: ${{ env.NEW_TASK_DEFINITION }}
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEFINITION --force-new-deployment