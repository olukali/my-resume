name: build push and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write 
  contents: read 

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number}}


jobs:
  build:
    runs-on: ubuntu-latest  # guthub runner
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: Aws creds config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}     # OIDC
          aws-region: ${{ env.AWS_REGION}}
      - name: Loging to ecr 
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
      - name: Build tag and push image 
        id: build-and-push
        run: |
            docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
            docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}
    
      - name: scan docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"  # Scans the built image
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
      - name: Push image to ecr
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}
      - name: Store image in github env
        run: echo "image=${{  steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV
  
  deploy:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ env.AWS_ROLE }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v1
  
        - name: Download task definition
          run: |
            aws ecs describe-task-definition --task-definition your-task-definition-name --query taskDefinition > task-definition.json
  
        - name: Fill in the new image ID
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: your-container-name
            image: ${{ env.image }}
  
        - name: Deploy to ECS
          if: github.ref == 'refs/heads/main'  # Only deploy on push to main, not on PR
          run: |
            aws ecs register-task-definition \
              --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
              --region ${{ env.AWS_REGION }}
            
            aws ecs update-service \
              --cluster your-cluster-name \
              --service your-service-name \
              --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
              --region ${{ env.AWS_REGION }}